1.Define a function max( ) that takes two numbers as arguments and returns the largest of them. 
Use the if-then-else construct available in Python. 
(It is true that Python has the max( ) function built in, but writing it yourself is nevertheless a good exercise.) 


def max(num1,num2):
    if num1>num2:
        return num1
    elif num1<num2:
        return num2
    else:
        return "Both are equal."

result= max(54,54)
print(result)

2.Define a function max_of_three( ) that takes three numbers as arguments and returns the largest of them. 

def max_of_three(num1,num2,num3):
    if num1>=num2 and num1>=num3:
        return num1
    elif num2>=num1 and num2>=num3:
        return num2
    elif num3>=num1 and num3>=num2:
        return num3
    else:
        return "All are equal."

result= max_of_three(54,12,57)
print(result)

3. Define a function that computes the length of a given list or string. (It is true that Python has the len( ) function built in, but writing it yourself is nevertheless a good exercise.) 

def len(sen):
    count=0;
    for i in sen:
        count=count+1
    return count
        
result=len("Shrikanth")
print(result)

4. Write a function that takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise. 

def len(sen):
    count=0;
    for i in sen:
        count=count+1
    return count
        
def if_vowel(c):
    if len(c)==1:
        if c in ('A','E','I','O','U','a','e','i','o','u'):
            return True
        else:
            return False
    else:
        return "Enter an Alphabet."
result=if_vowel("e")
print(result)

5. Write a function translate( ) that will translate a text into "rOvarspraket" (Swedish for "robber's language"). 
That is, double every consonant and place an occurrence of "o" in between. 
For example, translate( "this is fun" ) should return the string "tothohisos isos fofunon". 

def translate(sen):
    result=''
    for i in sen:
        if i not in ('A','E','I','O','U','a','e','i','o','u',' '):
            result=result+i+'o'+i
        else:
            result=result+i 
    return result

print(translate('this is fun'))

6. Define a function sum( ) and a function multiply( ) that sums and multiplies (respectively) all the numbers in a list of numbers.
 For example, sum( [1 , 2, 3, 4] ) should return 10, and multiply( [1 , 2, 3, 4] ) should return 24. 

def sum(list):
    sum=0
    for ele in list:
        sum=sum+ele
    return sum

def multiply(list):
    pro=1
    for ele in list:
        pro=pro*ele
    return pro

print(sum([1,2,3,4]))
print(multiply([1,2,3,4]))

7. Define a function reverse( ) that computes the reversal of a string. For example, reverse( "I an testing" ) should return the string "gnitset ma I". 

def reverse(s):
    rev=s[::-1]
    return rev 

print(reverse('I am testing'))

8.Define a function is_palindrome( ) that recognizes palindromes (i.e. words that look the same written backwards). For example, is_palindrome( " radar" ) should return True. 

def reverse(s):
    rev=s[::-1]
    return rev 

def is_palindrome(s):
    if s == reverse(s):
        return True
    else:
        return False

print(is_palindrome('radar'))
    
9. Write a function ismember ( ) that takes a value (i.e. a number, string, etc) x and a list of values a, and returns True if x is a member of a, False otherwise. 
(Note that this is exactly what the in operator does, but for the sake of the exercise you should pretend Python did not have this operator.)

def is_member(num,my_list):
    for i in my_list:
        if (i==num):
            return True
    return False
x=[899566,654,11,5321,351,3135,1351,54,351,313541,321,31,354,2,22,5,1]

print(is_member(2,x))

10. Define a function over lapping( ) that takes two lists and returns True if they have at least one member in common, False otherwise. 
You may use your is_member ( ) function, or the in operator, but for the sake of the exercise, you should (also) write it using two nested for-loops. 

def over_lapping(l1,l2):
    for i in l1:
        for j in l2:
            if i==j:
                return True
    return False

x1=[1,2,3,4,5,6]
x2=[0,7,8,9,10]

print(over_lapping(x2,x1))


