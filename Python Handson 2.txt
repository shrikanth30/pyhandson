11. Define a function generat e_n_char s( ) that takes an integer n and a character c and returns a string, n characters long, consisting only of c:s. 
For example, generate_n_chars (5 , "x" ) should return the string "xxxxx". (Python is unusual in that you can actually write an expression 5 * "x" that will evaluate to "xxxxx". 
For the sake of the exercise you should ignore that the problem can be solved in this manner.) 

def generate_n_chars(n,c):
    for i in range(n):
        print(c,end='')

generate_n_chars(5,'x')

12. Define a procedure histogram( ) that takes a list of integers and prints a histogram to the screen. 
For example, histogram( [4, 9 , 7] ) should print the following: 
****
*********
*******

def histogram(l):
    for i in l:
        for j in range(i):
            print('*',end='')
        print('\n')

histogram([4,9,7])

13. The function max( ) from exercise 1) and the function ma x_of_three( ) from exercise 2) will only work for two and three numbers, respectively. 
But suppose we have a much larger number of numbers, or suppose we cannot tell in advance how many they are? 
Write a function max_in_list ( ) that takes a list of numbers and returns the largest one. 

def max_in_list(l):
    max=0
    for i in l:
        if i > max:
            max=i
    return max

print(max_in_list([5,6,8,1,115,3,4,645]))

14. Write a program that maps a list of words into a list of integers representing the lengths of the correponding words. 

def len_words(l):
    word_length=[]
    for i in l:
        word_length.append(len(i))
    return word_length

print(len_words(['Python','Practice']))
        

15. Write a function f ind_longest_word( ) that takes a list of words and returns the length of the longest one. 

def find_longest_word(l):
    maxi=0
    word=''
    for i in l:
        if len(i)>maxi:
                maxi=len(i)
                word=i
    return word
    
print(find_longest_word(['six','four','One']))

16. Write a function filter_long_words( ) that takes a list of words and an integer n and returns the list of words that are longer than n. 

def find_longest_word(l,n):
    word=[]
    for i in l:
        if len(i)>n:
            word.append(i)
    return word
    
print(find_longest_word(['six','TwoHundred','Hundred','four','One'],3))

17. Write a version of a palindrome recognizer that also accepts phrase palindromes such as "Go hang a salami I'm a lasagna hog.", "Was it a rat I saw?", "Step on no pets", "Sit on a potato pan, Otis", "Lisa Bonet ate no basil", "Satan, oscillate my metallic sonatas", "I roamed under it as a tired nude Maori", "Rise to vote sir", or the exclamation "Dammit, I'm mad!". 
Note that punctuation, capitalization, and spacing are usually ignored.
 
def clean(s):
    new=''
    for i in range(len(s)):
        if s[i] not in [',','.','!','?',"'",' ']:
            new=new+s[i]
    new=new.upper()
    return new

def palindrome(s):
    snew=clean(s)
    if snew==snew[::-1]:
        return True
    else:
        return False

print(palindrome("Go hang a salami I'm a lasagna hog."))


18. A pangram is a sentence that contains all the letters of the English alphabet at least once, for example: The quick brown fox jumps over the lazy dog. Your task here is to write a function to check a sentence to see if it is a pangram or not.

def pangram(s):
    s=s.upper()
    s=s.replace(' ','')
    s=s.replace('.','')
    alpha='Q W E R T Y U I O P A S D F G H J K L Z X C V B N M'
    alphabets=alpha.split(' ')
    for i in alphabets:
        if i not in s:
            return False
    return True

print(pangram('The quick brown fox jump over the lazy dog.'))

